# vim: ft=gitconfig

[core]
  pager = less -X

[protocol]
  version = 2

[user]
  name = Markus Koller
  email = markus-koller@gmx.ch
  signingKey = DEEC7546D0A869C5AFDFD34AEC9A8B44C0635CE2

[includeIf "gitdir:~/src/gitlab/"]
  path = .gitconfig.gitlab

[color]
  ui = auto

[color "diff"]
  meta = yellow
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[advice]
  pushUpdateRejected = false
  statusHints = false
  commitBeforeMerge = false
  resolveConflict = false

[branch]
  autosetuprebase = always

[commit]
  gpgSign = true

[diff]
  algorithm = histogram
  renames = copies
  mnemonicprefix = true
  ignoreSubmodules = dirty

[difftool]
  prompt = false

[diff-so-fancy]
  markEmptyLines = false

[fetch]
  prune = true

[log]
  abbrevCommit = true
  decorate = true

[merge]
  stat = true
  tool = vimdiff

[mergetool]
  prompt = false
  keepBackup = false

[mergetool.gvimdiff]
  trustExitCode = false

[pager]
  log = diff-so-fancy | less -X
  show = diff-so-fancy | less -X
  diff = diff-so-fancy | less -X
  branch = less -FX

[rebase]
  autosquash = true
  stat = true

[stash]
  showPatch = true
  showStat = true

[submodule]
  fetchJobs = 0

[alias]
  h = help
  s = status
  st = status
  sta = -c diff.ignoreSubmodules=none st
  ss = !git --no-pager show --stat

  l = log --pretty=format:\"%C(yellow)[%h]%Creset %C(cyan)%an:%Creset %C(white)%s%Creset%C(green)%d%Creset %C(black bold)%ar%Creset\"
  ls = "!cd ${GIT_PREFIX:-.} && git l --stat"
  ld = log -p
  lg = l --graph
  news = l ORIG_HEAD..

  d = diff HEAD
  di = diff
  dc = diff --cached

  c = "!f() { [ $# -gt 0 ] && exec git checkout "$@"; branch=$( git branches 2>/dev/null | fzf +s --no-multi --prompt 'Branches> ' ) && git checkout "$branch"; }; f"
  co = c
  b = rev-parse --abbrev-ref HEAD
  branches = "!git -c color.ui=always branch -a | grep -Ev '(/HEAD|/master)' | sed -r -e 's,^[\\* ]*,,' -e 's,remotes/[^/]+/,,'"

  lb = branch -avv
  cb = create-branch
  db = delete-branch
  cm = checkout master
  cd = checkout development
  bcontains = branch -a --contains

  ap = add -p
  all = add -A
  unstage = reset HEAD -p
  discard = checkout -p
  ci = commit -v
  ca = commit -va
  amend = commit -v --amend
  reword = commit -v --amend --only
  extend = commit -v --amend --no-edit
  fixup = !hash=$( git -c color.ui=always l -n 1000 | fzf +s --no-multi --prompt 'Fixup> ' ) && git commit --fixup "$( echo "$hash" | cut -d[ -f2 | cut -d] -f1 )"
  initial = commit --allow-empty -m 'Initial commit'

  r = remote -v
  shallow = clone --depth 1

  up = pull -v --progress
  ff = merge --ff-only HEAD@{u}
  ri = rebase -i
  rem = rebase master
  rim = rebase -i master
  red = rebase development
  rid = rebase -i development
  rcontinue = rebase --continue
  solve = mergetool
  pom = up origin master

  pu   = push -v --progress
  poof = push -v --progress --force-with-lease
  pusu = -c push.default=current push -v --progress --set-upstream
  puci = pusu -o ci.skip

  sub = submodule
  checkout-submodules = submodule update -q --init
  cos = checkout-submodules

  sts = stash save
  stp = stash pop
  std = "!git stash drop && git stl"
  stw = "!cd ${GIT_PREFIX:-.} && git --no-pager -c color.ui=always stash show"
  stl = "!cd ${GIT_PREFIX:-.} && git --no-pager -c color.ui=always stash list"

  # shell wrappers
  sh = "!f() { [ $# -gt 0 ] && \"$@\"; }; f"
  bash = "!f() { [ $# -gt 0 ] && bash -ic \"$@\"; }; f"
  rg = !rg
  rake  = !rake
  rails = !rails
  guard = !guard
  cap = !cap
  mux = !mux
  ed = !git edit

  # try to run a GUI, or tig on terminals
  g = "!f() { if [ \"`uname -s`\" = 'Darwin' ]; then (gitx $@ &>/dev/null &); elif [ -n \"$DISPLAY\" ]; then (gitg $@ &>/dev/null &); else tig $@; fi; }; f"
