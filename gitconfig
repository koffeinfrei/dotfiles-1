[user]
  name = Markus Koller
  email = markus-koller@gmx.ch
  signingkey = A7A2B7B7 

[color]
  ui = auto

[advice]
  pushUpdateRejected = false
  statusHints = false
  commitBeforeMerge = false
  resolveConflict = false

[branch]
	autosetuprebase = always

[diff]
  renames = copies
  mnemonicprefix = true

[difftool]
  prompt = false

[log]
  abbrevCommit = true
  decorate = true

[pager]
  log = diff-highlight | less
  show = diff-highlight | less
  diff = diff-highlight | less

[merge]
  stat = true
  tool = vimdiff

[mergetool]
  prompt = false
  keepBackup = false

[mergetool.splice]
  cmd = sensible-vim $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'
  trustExitCode = true

[rerere]
  enabled = true
  autoupdate = true

[fetch]
  prune = true

[push]
  default = simple

[rebase]
  autosquash = true
  stat = true

[stash]
  showPatch = true
  showStat = true

[alias]
  h = help
  r = remote
  br = branch
  sub = submodule

  shallow = clone --depth 1

  di = diff
  dc = diff --cached
  ds = diff --stat

  st = status
  stat = status
  ls = branch -avv

  co = checkout
  sw = checkout
  ours = checkout --ours
  theirs = checkout --theirs

  ap = add -p
  all = add -A
  ci = commit -v
  ca = commit -va
  amend = commit -v --amend
  unstage = reset HEAD -p
  discard = checkout -p

  l = log --graph --pretty=format:\"%C(yellow)[%h]%Creset %C(cyan)%an:%Creset %C(white)%s%Creset%C(green)%d%Creset %C(black bold)%ar%Creset\"
  lstat = "!cd ${GIT_PREFIX:-.} && git l --stat"
  ldiff = log -p
  blame = blame -w

  up = pull -v --progress
  upall = pull-all
  ff = merge --ff-only HEAD@{u}
  rem = rebase-maybe
  rup = remote update
  continue = rebase --continue
  skip = rebase --skip
  solve = mergetool
  splice = mergetool --tool=splice

  pr = "!f() { git fetch github refs/pull/$1/head:pr/$1; } ; f"
  delbranch = "!f() { git branch -d $1 && git pu github :$1; }; f"

  pu   = -c push.default=simple   push -v --progress
  pua  = -c push.default=matching push -v --progress
  poof = -c push.default=simple   push -v --progress --force-with-lease
  pub  = "!f() { local target=$1; shift; git push . HEAD:$target $@; }; f"

  sts = stash save
  stp = stash pop
  std = "!git stash drop && git stl"
  stw = "!cd ${GIT_PREFIX:-.} && git --no-pager -c color.ui=always stash show"
  stl = "!cd ${GIT_PREFIX:-.} && git --no-pager -c color.ui=always stash list"

  # shell wrappers
  sh = "!f() { [ $# -gt 0 ] && \"$@\"; }; f"
  bash = "!f() { [ $# -gt 0 ] && bash -ic \"$@\"; }; f"
  ag = "!ag --smart-case"

  rake  = "!rake"
  rails = "!rails"
  guard = "!guard"
  cap = "!cap"
  ctags = "!f() { local dir=$( git rev-parse --git-dir); [ -d \"$dir\" ] && git ls-files | ctags -RL - --tag-relative -f \"$dir/tags\"; }; f"

  mux = "!mux"
  bun = "!bun"
  ed = edit

  # try to run a GUI, or tig on terminals
  g = "!f() { if [ \"`uname -s`\" = 'Darwin' ]; then (gitx $@ &>/dev/null &); elif [ -n \"$DISPLAY\" ]; then (gitg $@ &>/dev/null &); else tig $@; fi; }; f"
