#!/bin/bash

echo
echo -e '\e[0;32mUpdating remotes...'
git fetch --all --quiet --prune || exit 1
git merge --ff-only HEAD@{u} >/dev/null || exit 1

LOCAL_BRANCHES=$(git for-each-ref --format '%(refname:short)' refs/heads | sort)
REMOTE_BRANCHES=$(git for-each-ref --format '%(refname:short)' refs/remotes | sort)

function ask_yes {
  echo -ne "$1 [Y/n]\e[0m "
  read
  [ "$REPLY" != "N" -a "$REPLY" != "n" ]
}

function ask_no {
  echo -ne "$1 [y/N]\e[0m "
  read
  [ "$REPLY" = "Y" -o "$REPLY" = "y" ]
}

function flush_branch {
  local branch="$1"

  git wtf | grep --color=never "$branch"
  ask_yes "\e[0;36m     > Remove branch?" || return

  if ! git branch -d "$branch"; then
    ask_no "\e[0;31m     > Forcibly remove branch?" || return
    git branch -D "$branch" || return
  fi

  local remote_branches=$(echo "$REMOTE_BRANCHES" | grep "$branch")
  for remote_branch in $remote_branches; do
    local remote=$(echo $remote_branch | cut -d/ -f1)
    local remote_branch=$(echo $remote_branch | cut -d/ -f2-)

    ask_yes "\e[0;32m     > Delete on remote \e[1;32m$remote\e[0;32m?" || continue
    git push $remote :$remote_branch
  done
}

unset branches

case "$1" in
  -a)
    title="Local branches"
    branches=$(echo "$LOCAL_BRANCHES" | grep '/')

    if [ -z "$branches" ]; then
      echo -e "\e[0;36mNo local branches.\e[0m"
      echo
      exit
    fi
    ;;
  "")
    title="Merged branches"
    branches=`comm -23 \
      <(echo "$LOCAL_BRANCHES") \
      <(echo "$REMOTE_BRANCHES" | sed -r 's|^[^/]+/||' | sort)`

    if [ -z "$branches" ]; then
      echo -e "\e[0;36mNo merged branches.\e[0m"
      echo
      exit
    fi
    ;;
  *)
    flush_branch "$1"
    exit
    ;;
esac

echo
remote_topic_branches=$(echo "$REMOTE_BRANCHES" | grep '/.*/')
if [ -n "$remote_topic_branches" ]; then
  echo -e "\e[1;32mRemote branches:\e[0m"
  for branch in $remote_topic_branches; do
    echo -e "\e[0;32m - $branch\e[0m"
  done
  echo
fi

for branch in $branches; do
  flush_branch "$branch"
  echo
done
