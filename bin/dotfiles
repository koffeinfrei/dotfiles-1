#!/bin/bash

# Check for Bash 4
if [ "${BASH_VERSION:0:1}" -lt 4 ]; then
  echo "Sorry, this script requires Bash 4's hash tables!"
  echo "You're running version $BASH_VERSION"
  exit 1
fi

# Use Homebrew GNU commands on OS X if available
if [ "$( uname -s )" = "Darwin" ]; then
  shopt -s expand_aliases
  for command in readlink sed; do
    if which g$command &>/dev/null; then
      alias $command="g$command"
    fi
  done
fi

COMMAND=

FORCE=0
VERBOSE=0
QUIET=0
DRYRUN=0

function force   { [ $FORCE   -eq 1 ]; }
function verbose { [ $VERBOSE -eq 1 ]; }
function quiet   { [ $QUIET   -eq 1 ]; }
function dryrun  { [ $DRYRUN  -eq 1 ]; }

function dryrun_message {
  dryrun && output "[DRY RUN]"
}

function main {
  # find the dotfiles repository
  if [ -z "$DOTFILES" ]; then
    if [ -d /etc/dotfiles ]; then
      DOTFILES=/etc/dotfiles
    elif [ -d ~/.dotfiles ]; then
      DOTFILES=~/.dotfiles
    else
      abort "Can't find repository in /etc/dotfiles or $HOME/.dotfiles, please set \$DOTFILES"
    fi
  fi

  # resolve symlinks
  while [ -L "$DOTFILES" ]; do
    DOTFILES=$( readlink -f "$DOTFILES" )
  done

  if [ ! -f "$DOTFILES/bin/dotfiles" ]; then
    abort "Can't find dotfiles script in repository, please check your \$DOTFILES"
  fi

  # Parse arguments
  while [ $# -gt 0 ]; do
    case "$1" in
      -f|--force)   FORCE=1;;
      -v|--verbose) VERBOSE=1;;
      -q|--quiet)   QUIET=1;;
      -n|--dry-run) DRYRUN=1;;
         --path)    echo "$DOTFILES"; exit;;
      -*)           usage;;
      *)
        COMMAND=( "$@" )
        break
        ;;
    esac
    shift
  done

  if [ -n "$COMMAND" ]; then
    STATUS=0
    run "${COMMAND[@]}"
    exit $STATUS
  else
    usage
  fi
}

function usage {
  echo "Usage: $( basename $0 ) [options] COMMAND [args]"
  echo
  echo "Options:"
  echo "  -f, --force     Assume yes for all questions"
  echo "  -v, --verbose   Increase verbosity"
  echo "  -q, --quiet     Suppress all normal output"
  echo "  -n, --dry-run   Only show changes, without performing them"
  echo "      --path      Show path to the dotfiles repository and exit"
  echo
  echo "Commands:"
  echo "  init                  Install symlinks for all dotfiles"
  echo "  install PATH...       Install symlink for PATH"
  echo "  add PATH...           Add file to repository and replace it with a symlink"
  echo "  ca, commitall         Commit all changes"
  echo "  list                  List submodules"
  echo "  up, update [MODULE]   Update submodules (fetch new commits)"
  echo "  sync                  Update, commit and push"
  echo
  echo "Other arguments:"
  echo "  COMMAND [ARGS]...     Excecute a Git command inside the dotfiles repository"
  echo "  git COMMAND [ARGS]..."
  echo

  exit 255
}

function msg {
  local message="${1/$HOME/~}"
  local color=${2:-4}
  local echo_options="$3"

  if verbose || ! quiet || [ "$color" = 1 ]; then
    if [ -n "$message" ]; then
      echo -e $echo_options " \e[1;3${color}m>\e[0m $message" | sed -r 's/\{\{/\o033[1m/g' | sed -r 's/\}\}/\o033[0m/g'
    else
      echo -e $echo_options
    fi
  fi
}

function output {
  local output="$1"
  local echo_options="$2"

  if verbose || ! quiet; then
    echo -e $echo_options "$1"
  fi
}

function status  { msg "$1" ${2:-2}; }
function warning { msg "$1" ${2:-3}; }

function error {
  STATUS=1
  msg "$1" 1
}

function abort {
  [ -n "$1" ] && error "$@"
  exit 1
}

function ask {
  [ $FORCE -eq 1 ] && return

  msg "$1 [y/N] " "${2:-6}" -n >&2
  read
  [ "$REPLY" = "Y" -o "$REPLY" = "y" ]
}

function ask_yes {
  [ $FORCE -eq 1 ] && return

  msg "$1 [Y/n] " "$2" -n >&2
  read
  [ "$REPLY" != "N" -a "$REPLY" != "n" ]
}

function ask_abort {
  STATUS=1
  if ! ask "Do you want to continue?" 1; then
    abort
  fi
}

# create an associative array to hold all commands and paths used for sudo,
# so we can avoid duplicate warnings for the same value
declare -A sudo_history

function system {
  local command="$1"
  shift

  if [ "$command" = "chown" -o "$command" = "chgrp" ]; then
    if [ -z "${sudo_history["$command"]}" ]; then
      warning "Using [1;33msudo[0m for command [1m$command[0m"
    fi

    sudo_history["$command"]=1
    command="sudo $command"
  else
    for arg in "$@"; do
      local dir=$( dirname -- "$arg" )
      if [ "$dir" != "." -a -d "$dir" -a ! -w "$dir" ]; then
        if [ -z "${sudo_history["$dir"]}" ]; then
          warning "Using [1;33msudo[0m for directory [1m$dir[0m arg $arg"
        fi

        sudo_history["$dir"]=1
        command="sudo $command"
        break
      fi
    done
  fi

  force   && command="$command -f"
  verbose && command="$command -v"

  verbose && output "     executing: $command $(echo "$@") $( dryrun_message )"
  dryrun && return

  command $command "$@"
}

function git {
  if [ "$1" = "ignore-errors" ]; then
    local onerror=":"
    shift
  else
    local onerror="ask_abort"
  fi

  verbose && output "     executing: git $(echo "$@") $( dryrun_message )"
  dryrun && return

  (cd "$DOTFILES" || abort; command git "$@")
  local status=$?
  [ $status -eq 0 ] || $onerror

  return $status
}

function validate {
  if ! [[ "$1" =~ ^($HOME|(/private|/usr/local)?/etc)($|/) ]]; then
    error "Path is not inside \$HOME or /etc: {{$1}}"
    return 1
  else
    return 0
  fi
}

function load_key {
  local key=~/.ssh/id_rsa
  if [ -f "$key" -a "$( uname -s )" != "Darwin" ]; then
    ssh-add -l | fgrep -q "/.ssh/id_rsa (RSA)" || ssh-add "$key" </dev/null
  fi
}

function target {
  local origin="$1"

  if [[ "$origin" =~ ^$HOME/ ]]; then
    local target="${1:${#HOME}+1}"
  elif [[ "$origin" =~ ^/private/etc/ ]]; then
    local target="${1:8}"
  elif [[ "$origin" =~ ^/usr/local/etc/ ]]; then
    local target="${1:10}"
  elif [[ "$origin" =~ ^/etc/ ]]; then
    local target="${1:1}"
  fi

  echo "$DOTFILES/${target#.}"
}

function origin {
  local target="${1:${#DOTFILES}+1}"
  local topdir="${target%%/*}"

  if [ "$topdir" = "etc" -o "$topdir" = "private" ]; then
    echo "/$target"
  elif [ -e "$HOME/$topdir" ]; then
    echo "$HOME/$target"
  else
    echo "$HOME/.$target"
  fi
}

function run {
  local command="$1"
  shift

  case "$command" in
    sync)
      if git ignore-errors status -s | grep -q .; then
        output
        git status
        output
        ask_abort

        run commitall
      fi

      output
      run pull

      if git status | fgrep -q "Your branch is ahead"; then
        output
        run push
      fi

      output
      ;;
    list)
      cat "$DOTFILES/.gitmodules" | awk '/path = / { print $3 }' | sort
      ;;
    up|update)
      unset batch
      [ "$1" = '--batch' ] && batch=1 && shift
      commit_message="Update submodules"

      if [ -n "$1" ]; then
        local submodule="$1"
        shift

        if [ ! -d "$DOTFILES/$submodule" ]; then
          submodule=$( run list | grep -m1 "$submodule" )
          if [ -z "$submodule" ]; then
            abort "Submodule not found: {{$submodule}}"
          fi
        fi

        commit_message="Update submodule $submodule"

        (
          cd "$DOTFILES/$submodule" || abort
          [ -e ".git" ] || abort "Not a git repository: .git"

          old_commit=$( system git rev-parse HEAD )
          system git pull -q origin master
          new_commit=$( system git rev-parse HEAD )

          if [ "$new_commit" != "$old_commit" ]; then
            local url=$( system git remote -v | egrep -om1 'https?://[^ ]+' )
            [ -n "$url" ] && url=" [ {{$url}} ]"

            [ ! $batch ] && output
            status "Changes in {{$submodule}}$url:" 6
            quiet || system git -c color.ui=always diff --stat @{1}.. | sed -r 's/^/    /'

            if [ "$submodule" = "vim/bundle/vimproc" ]; then
              run build "$DOTFILES/$submodule"
            fi

            output
          elif [ ! $batch ]; then
            status "No changes in {{$submodule}}" 2
          fi

        ) # keep cd scope
      else
        output
        run pull -q
        status "{{Updating submodules:}}"

        local output=$( mktemp -d ${TMPDIR:-/tmp}/dotfiles.XXXXXX )

        output '     \e[1;36m[' -n

        for submodule in $( run list ); do
          (
            run update --batch "$submodule" > "$output/${submodule//\//-}"
            output '\e[0;36m=' -n
          ) &
        done

        wait
        output '\e[1;36m]\e[0m'
        output

        cat "$output"/*
        rm -rf "$output"
      fi

      [ $batch ] && return

      local changes=$( git status | egrep "(\s\.gitmodules\b| \(new commits\)$)" | awk '{ print $2 }' )
      [ -z "$changes" ] && return

      run commit -m "$commit_message" $changes

      if git status | fgrep -q "Your branch is ahead"; then
        run push
      fi
      output

      ;;
    init)
      function install_paths {
        for path in "$@"; do
          if [ ! -e "$path" -o "$( basename "$path" )" = "README.md" ]; then
            continue
          fi

          if [ -e "$path/.skip" ]; then
            continue
          elif [ ! -d "$path" -o -L "$path" -o -e "$path/.install" ]; then
            run install "$path"
          fi

          if [ -d "$path" -a ! -e "$path/.git" -a ! -L "$path" -a ! -L "$( origin "$path" )" ]; then
            install_paths "$path"/*
          fi
        done
      }

      output
      install_paths "${1:-$DOTFILES}"/*
      output
      ;;
    install)
      [ $# -eq 0 ] && usage

      for path in "$@"; do
        local origin=$( readlink -f -- "$path" )
        local target=$( target "$origin" )
        local force=0

        if [[ "$origin" =~ ^$DOTFILES/ ]]; then
          target="$origin"
          origin=$( origin "$target" )
        fi

        if [ ! -e "$target" ]; then
          error "Path not found: {{$target}}"
          continue
        elif ! validate "$origin"; then
          continue
        elif [ -L "$origin" ]; then
          local link=$( readlink "$origin" 2>/dev/null )
          if [ ! -e "$link" ]; then
            error "Broken symlink: {{$origin}} -> [1;36m$link[0m"
            force=1
          elif [[ "$link" =~ ^$DOTFILES/ ]]; then
            msg "Already symlinked: {{$origin}}"
            continue
          else
            msg "Already symlinked: {{$origin}} -> [1;36m$link[0m"
          fi
        fi

        if [ -e "$origin" -o -L "$origin" ]; then
          local ask="ask"
          local question="Delete {{$origin}} and install symlink?"
        else
          local ask="ask_yes"
          local question="Install symlink for {{$origin}}?"
        fi

        if [ $force -eq 1 ] || $ask "$question"; then
          if [ -d "$origin" ]; then
            if ask "Delete {{$origin}}?"; then
              system rm -r "$origin"
            else
              ask_abort
            fi
          elif [ -e "$origin" -o -L "$origin" ]; then
            system rm "$origin"
          fi

          local parent=$( dirname "$origin" )
          if [ ! -d "$parent" ]; then
            system mkdir -p "$parent"
          fi

          if [ ! -e "$origin" -o $DRYRUN -eq 1 ] && system ln -s "$target" "$origin"; then
            status "Successfully installed {{$origin}}"
          else
            error "Error while installing {{$origin}}"
            continue
          fi
        fi
      done
      ;;
    add)
      [ $# -eq 0 ] && usage

      for path in "$@"; do
        local origin=$( readlink -f "$path" 2>/dev/null )
        local target=$( target "$origin" )
        local target_dir=$( dirname "$target" )

        if [ ! -e "$origin" ]; then
          error "Path not found: {{$origin}}"
        elif ! validate "$origin"; then
          continue
        elif [ -L "$path" ]; then
          msg "Already symlinked: {{$path}}"
          continue
        elif [ -e "$target" ]; then
          run install "$target" "$origin"
          continue
        fi

        ask_yes "Add {{$origin}} to repository?" || continue

        if (test -d "$target_dir" || system mkdir -p "$target_dir") \
          && system mv "$origin" "$target" \
          && system ln -s "$target" "$origin"
        then
          system rm -f "$target_dir/.skip"
          [ -O "$target" ] || system chown "$USER:$GROUPS" "$target"
          [ -d "$target" ] && system chmod g+s "$target"
          git add "$target"

          status "Successfully added {{$target}}"
          let added++
        else
          error "Error while converting path: {{$origin}}"
          continue
        fi
      done
      ;;
    ca|commitall)
      status "{{Committing local changes...}}"
      git ignore-errors add -A .
      git ignore-errors commit -a -m "Sync dotfiles" "$@"
      ;;
    pull)
      local changes=$( git status -s --ignore-submodules )
      [ -n "$changes" ] && git stash save | fgrep -q "No local changes to save" && unset changes

      local current=$( git rev-parse HEAD )

      status "{{Merging remote changes...}}"
      load_key
      git pull -v --progress --rebase "$@"

      [ -n "$changes" ] && git stash pop -q

      if [ "$( git rev-parse HEAD )" != "$current" ]; then
        status "{{Checking out submodules...}}"
        run submodule sync -q
        run submodule update --init -q
        run build_all
      fi
      ;;
    push)
      load_key
      status "{{Pushing local changes...}}"
      git push -q "$@"
      ;;
    build)
      local dir="$1"
      shift

      status "Building {{${dir/$DOTFILES\//}}} $( dryrun_message )" 3
      dryrun && return

      if ! system make -sBC "$dir" "$@"; then
        error "Error while compiling {{$dir}}"
        ask_abort
      fi
      ;;
    build_all)
      run build "$DOTFILES/vim/bundle/vimproc"
      ;;
    git)
      command="$1"
      shift
      git ignore-errors $command "$@"
      ;;
    *)
      git ignore-errors $command "$@"
      ;;
  esac
}

main "$@"
