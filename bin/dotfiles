#!/bin/bash

# Check for Bash 4
if [ "${BASH_VERSION:0:1}" -lt 4 ]; then
  echo "Sorry, this script requires Bash 4's hash tables!"
  echo "You're running version $BASH_VERSION"
  exit 1
fi

# Use Homebrew GNU commands on OS X if available
if [ "`uname -s`" = "Darwin" ]; then
  shopt -s expand_aliases
  for command in readlink sed; do
    if which g$command &>/dev/null; then
      alias $command="g$command"
    fi
  done
fi

DRYRUN=0
VERBOSE=0
QUIET=0
FORCE=0
COMMAND=

function main {
  # find the dotfiles repository
  if [ -z "$DOTFILES" ]; then
    if [ -d /etc/dotfiles ]; then
      DOTFILES=/etc/dotfiles
    elif [ -d ~/.dotfiles ]; then
      DOTFILES=~/.dotfiles
    else
      error "Can't find repository in /etc/dotfiles or $HOME/.dotfiles, please set \$DOTFILES"
      exit 1
    fi
  fi

  # resolve symlinks
  while [ -L "$DOTFILES" ]; do
    DOTFILES=`readlink -f "$DOTFILES"`
  done

  if [ ! -f "$DOTFILES/bin/dotfiles" ]; then
    error "Can't find dotfiles script in repository, please check your \$DOTFILES"
    exit 1
  fi

  # Parse arguments
  while [ $# -gt 0 ]; do
    case "$1" in
      -n|--dry-run) DRYRUN=1;;
      -v|--verbose) VERBOSE=1;;
      -q|--quiet)   QUIET=1;;
      -f|--force)   FORCE=1;;
         --path)    echo "$DOTFILES"; exit;;
      -*)           usage;;
      *)
        COMMAND=( "$@" )
        break
        ;;
    esac
    shift
  done

  if [ -n "$COMMAND" ]; then
    STATUS=0
    run "${COMMAND[@]}"
    exit $STATUS
  else
    usage
  fi
}

function usage {
  echo "Usage: `basename $0` [options] COMMAND [args]"
  echo
  echo "Options:"
  echo "  -n, --dry-run   Only show changes, without performing them"
  echo "  -v, --verbose   Increase verbosity"
  echo "  -q, --quiet     Suppress all normal output"
  echo "  -f, --force     Assume yes for all questions"
  echo "      --path      Show path to the dotfiles repository and exit"
  echo
  echo "Commands:"
  echo "  init                  Install symlinks for all dotfiles"
  echo "  install PATH...       Install symlink for PATH"
  echo "  add PATH...           Add file to repository and replace it with a symlink"
  echo "  ca, commitall         Commit all changes"
  echo "  up, update [MODULE]   Update submodules (fetch new commits)"
  echo "  sync                  Update, commit and push"
  echo
  echo "Other arguments:"
  echo "  COMMAND [ARGS]...     Excecute a Git command inside the dotfiles repository"
  echo "  git COMMAND [ARGS]..."
  echo
  exit 255
}

function msg {
  if [ $QUIET -eq 0 -o $VERBOSE -eq 1 -o "$2" = 1 ]; then
    local msg="${1/$HOME/~}"
    local color=${2:-4}

    if [ -n "$msg" ]; then
      echo $3 " [1;3${color}m>[0m $msg" | sed -r 's/\{\{/[1m/g' | sed -r 's/\}\}/[0m/g'
    else
      echo
    fi
  fi
}

function status { msg "$1" 2; }
function warning { msg "$1" 3; }

function error {
  STATUS=1
  msg "$1" 1
}

function ask {
  [ $FORCE -eq 1 ] && return

  msg "$1 [y/N] " "${2:-6}" -n >&2
  read
  [ "$REPLY" = "Y" -o "$REPLY" = "y" ]
}

function ask_yes {
  [ $FORCE -eq 1 ] && return

  msg "$1 [Y/n] " "$2" -n >&2
  read
  [ "$REPLY" != "N" -a "$REPLY" != "n" ]
}

function ask_abort {
  STATUS=1
  if ! ask "Do you want to continue?" 1; then
    exit 1
  fi
}

function system {
  local command="$1"
  shift

  # create an associative array to hold all commands and paths used for sudo,
  # so we can avoid duplicate warnings for the same value
  [ -n "$sudo_history" ] || declare -gA sudo_history

  if [ "$command" = "chown" -o "$command" = "chgrp" ]; then
    if [ -z "${sudo_history["$command"]}" ]; then
      warning "Using [1;33msudo[0m for command [1m$command[0m"
    fi

    sudo_history["$command"]=1
    command="sudo $command"
  else
    for arg in "$@"; do
      local dir=`dirname -- "$arg"`
      if [ "$dir" != "." -a -d "$dir" -a ! -w "$dir" ]; then
        if [ -z "${sudo_history["$dir"]}" ]; then
          warning "Using [1;33msudo[0m for directory [1m$dir[0m arg $arg"
        fi

        sudo_history["$dir"]=1
        command="sudo $command"
        break
      fi
    done
  fi

  [ $FORCE   -eq 1 ] && command="$command -f"
  [ $VERBOSE -eq 1 ] && command="$command -v" && echo "    executing: $command $@"
  [ $DRYRUN  -eq 1 ]                          && echo "    executing: $command $@ [DRY RUN]" && return

  command $command "$@"
}

function git {
  if [ "$1" = "ignore-errors" ]; then
    local onerror=":"
    shift
  else
    local onerror="ask_abort"
  fi

  [ $VERBOSE -eq 1 ] && echo "    executing: git $@"
  [ $DRYRUN  -eq 1 ] && echo "    executing: git $@ [DRY RUN]" && return

  (cd "$DOTFILES" || exit 1; command git "$@")
  local status=$?
  [ $status -eq 0 ] || $onerror

  return $status
}

function validate {
  if ! [[ "$1" =~ ^($HOME|(/private|/usr/local)?/etc)($|/) ]]; then
    error "Path is not inside \$HOME or /etc: {{$1}}"
    return 1
  else
    return 0
  fi
}

function load_key {
  local key=~/.ssh/id_rsa
  if [ -f "$key" -a "`uname -s`" != "Darwin" ]; then
    ssh-add -l | fgrep -q "/.ssh/id_rsa (RSA)" || ssh-add "$key" </dev/null
  fi
}

function target {
  local origin="$1"

  if [[ "$origin" =~ ^$HOME/ ]]; then
    local target="${1:${#HOME}+1}"
  elif [[ "$origin" =~ ^/private/etc/ ]]; then
    local target="${1:8}"
  elif [[ "$origin" =~ ^/usr/local/etc/ ]]; then
    local target="${1:10}"
  elif [[ "$origin" =~ ^/etc/ ]]; then
    local target="${1:1}"
  fi

  echo "$DOTFILES/${target#.}"
}

function origin {
  local target="${1:${#DOTFILES}+1}"
  local topdir="${target%%/*}"

  if [ "$topdir" = "etc" -o "$topdir" = "private" ]; then
    echo "/$target"
  elif [ -e "$HOME/$topdir" ]; then
    echo "$HOME/$target"
  else
    echo "$HOME/.$target"
  fi
}

function run {
  local command="$1"
  shift

  case "$command" in
    sync)
      if git ignore-errors status -s | grep -q .; then
        msg
        git status
        echo
        ask_abort

        run commitall
      fi

      msg
      run pull

      if git status | fgrep -q "Your branch is ahead"; then
        msg
        status "{{Pushing local changes...}}"
        run push
      fi

      msg
      ;;
    up|update)
      msg
      run pull -q

      if [ -n "$1" ]; then
        local submodule="$1"
        [[ "$submodule" =~ / ]] || submodule="vim/bundle/$submodule"
        shift

        status "Updating submodule {{$submodule}}..."
        message="Update submodule $submodule"

        (
          cd "$DOTFILES/$submodule" || exit 1
          [ -e ".git" ] || exec echo "Not a git repository: .git"

          if [[ "$submodule" =~ powerline$ ]]; then
            local branch="develop"
          else
            local branch="master"
          fi

          system git pull -v --progress origin "$branch"

          if [ "$submodule" = "vim/bundle/vimproc" ]; then
            build "$DOTFILES/$submodule"
          fi
        )
      else
        status "{{Updating all submodules...}}"
        message="Update submodules"

        run submodule foreach 'if [[ "$path" =~ powerline$ ]]; then branch="develop"; else branch="master"; fi; git pull -v --progress origin "$branch"'

        run build_all
      fi

      local changes=`git status | egrep "(\s\.gitmodules\b| \(new commits\)$)" | awk '{ print $2 }'`
      if [ -n "$changes" ]; then
        run commit -m "$message" $changes
      fi

      if git status | fgrep -q "Your branch is ahead"; then
        run push
      fi

      msg
      ;;
    init)
      function install_paths {
        for path in "$@"; do
          if [ ! -e "$path" -o "`basename "$path"`" = "README.md" ]; then
            continue
          fi

          if [ -e "$path/.skip" ]; then
            continue
          elif [ ! -d "$path" -o -L "$path" -o -e "$path/.install" ]; then
            run install "$path"
          fi

          if [ -d "$path" -a ! -e "$path/.git" -a ! -L "$path" -a ! -L "`origin "$path"`" ]; then
            install_paths "$path"/*
          fi
        done
      }

      msg
      install_paths "${1:-$DOTFILES}"/*
      msg
      ;;
    install)
      [ $# -eq 0 ] && usage

      for path in "$@"; do
        local origin=`readlink -f -- "$path"`
        local target=`target "$origin"`
        local force=0

        if [[ "$origin" =~ ^$DOTFILES/ ]]; then
          target="$origin"
          origin=`origin "$target"`
        fi

        if [ ! -e "$target" ]; then
          error "Path not found: {{$target}}"
          continue
        elif ! validate "$origin"; then
          continue
        elif [ -L "$origin" ]; then
          local link=`readlink "$origin" 2>/dev/null`
          if [ ! -e "$link" ]; then
            error "Broken symlink: {{$origin}} -> [1;36m$link[0m"
            force=1
          elif [[ "$link" =~ ^$DOTFILES/ ]]; then
            msg "Already symlinked: {{$origin}}"
            continue
          else
            msg "Already symlinked: {{$origin}} -> [1;36m$link[0m"
          fi
        fi

        if [ -e "$origin" -o -L "$origin" ]; then
          local ask="ask"
          local question="Delete {{$origin}} and install symlink?"
        else
          local ask="ask_yes"
          local question="Install symlink for {{$origin}}?"
        fi

        if [ $force -eq 1 ] || $ask "$question"; then
          if [ -d "$origin" ]; then
            if ask "Delete {{$origin}}?"; then
              system rm -r "$origin"
            else
              ask_abort
            fi
          elif [ -e "$origin" -o -L "$origin" ]; then
            system rm "$origin"
          fi

          local parent=`dirname "$origin"`
          if [ ! -d "$parent" ]; then
            system mkdir -p "$parent"
          fi

          if [ ! -e "$origin" -o $DRYRUN -eq 1 ] && system ln -s "$target" "$origin"; then
            status "Successfully installed {{$origin}}"
          else
            error "Error while installing {{$origin}}"
            continue
          fi
        fi
      done
      ;;
    add)
      [ $# -eq 0 ] && usage

      for path in "$@"; do
        local origin=`readlink -f "$path" 2>/dev/null`
        local target=`target "$origin"`
        local target_dir=`dirname "$target"`

        if [ ! -e "$origin" ]; then
          error "Path not found: {{$origin}}"
        elif ! validate "$origin"; then
          continue
        elif [ -L "$path" ]; then
          msg "Already symlinked: {{$path}}"
          continue
        elif [ -e "$target" ]; then
          run install "$target" "$origin"
          continue
        fi

        ask_yes "Add {{$origin}} to repository?" || continue

        if (test -d "$target_dir" || system mkdir -p "$target_dir") \
          && system mv "$origin" "$target" \
          && system ln -s "$target" "$origin"
        then
          system rm -f "$target_dir/.skip"
          [ -O "$target" ] || system chown "$USER:$GROUPS" "$target"
          [ -d "$target" ] && system chmod g+s "$target"
          git add "$target"

          status "Successfully added {{$target}}"
          let added++
        else
          error "Error while converting path: {{$origin}}"
          continue
        fi
      done
      ;;
    ca|commitall)
      status "{{Committing local changes...}}"
      git ignore-errors add -A .
      git ignore-errors commit -a -m "Sync dotfiles" "$@"
      ;;
    pull)
      local changes=`git status -s --ignore-submodules`
      [ -n "$changes" ] && git stash save | fgrep -q "No local changes to save" && unset changes

      local current=`git rev-parse HEAD`

      status "{{Merging remote changes...}}"
      load_key
      git pull -v --progress --rebase "$@"

      [ -n "$changes" ] && git stash pop -q

      if [ "`git rev-parse HEAD`" != "$current" ]; then
        status "{{Checking out submodules...}}"
        run submodule sync -q
        run submodule update --init -q
        run build_all
      fi
      ;;
    push)
      load_key
      git push -v --progress "$@"
      ;;
    build)
      local dir="$1"
      shift

      status "Compiling {{$dir}}"
      if ! system make -sBC "$dir" "$@"; then
        error "Error while compiling {{$dir}}"
        ask_abort
      fi
      ;;
    build_all)
      run build "$DOTFILES/vim/bundle/vimproc"
      ;;
    git)
      command="$1"
      shift
      git ignore-errors $command "$@"
      ;;
    *)
      git ignore-errors $command "$@"
      ;;
  esac
}

main "$@"
