#!/bin/bash

SRC=${SRC:-~/src}

function usage {
  echo "Usage:"
  echo "  src [status] [-a]                  Show status for all projects"
  echo "  src list [-a]                      List all project paths"
  echo "  src each [COMMAND] [ARGS]          Run command in each project"
  echo
  echo "  src PROJECT                        Output project path"
  echo "  src PROJECT [GIT-COMMAND] [ARGS]   Run Git command"
  echo "  src PROJECT -e [COMMAND] [ARGS]    Run command"
  echo "  src PROJECT @MUX                   Run mux command"
  echo
  exit 255
}

case "$1" in
  ''|status|-a)
    [ "$1" != "-a" ] && shift

    first=1
    last=0

    echo
    for project in `src list "$@"`; do
      dir="$SRC/$project"
      [ -d "$dir/.git" ] || continue

      changes=`cd "$dir"; git status -s | grep -c .`
      unmerged=`cd "$dir"; git status | egrep "Your branch is (behind|ahead)"`

      if [ $changes -gt 0 -o -n "$unmerged" ]; then
        label="changes"

        if [ $changes -gt 0 ]; then
          label="changes"
          [ $changes -eq 1 ] && label="change"
          label="$changes\e[1;37m $label"
        elif echo "$unmerged" | grep -q ahead; then
          label="Unpublished commits"
        else
          label="Unmerged commits"
        fi

        [ -z "$first" ] && echo
        echo -e " \e[1;32m>\e[1;37m \e[1;33m$label in \e[1;36m[`realpath "$dir"`]\e[0m" | sed -r "s|$HOME|~|"
        (cd "$dir" || exit 1; git -c color.ui=always status | sed -r 's/^/    /')
      else
        [ $last -gt 0 ] && echo
        echo -e " \e[0;32m>\e[0m No changes in \e[0;36m[`realpath "$dir"`]\e[0m" | sed -r "s|$HOME|~|"
      fi

      unset first
      last=$changes
      [ -n "$unmerged" ] && let last++
    done
    echo

    exit
    ;;
  -*)
    usage
    ;;
  list)
    if [ "$2" = "-a" ]; then
      unset filter options
    else
      filter="-not \( -path $SRC/archive -prune \) -not \( -path $SRC/upstream -prune \)"
      options="-v"
    fi

    eval find -L "$SRC" -mindepth 1 -maxdepth 4 -type d $filter -name .git | sed -r "s|^$SRC/(.+)/\.git$|\1|" | egrep -v "^dotfiles/.+" | sort

    exit
    ;;
  each)
    shift
    for project in `src list`; do
      echo -e "# \e[0;36m$project\e[0m" | sed -r "s|$HOME|~|"
      (cd "$SRC/$project" || exit 1; "$@")

      status=$?
      if [ $status -ne 0 ]; then
        echo -e "# \e[1;31mexit code $status\e[0m"
      fi
      echo
    done

    exit
    ;;
esac

PROJECT="$1"
shift

if [ -z "$PROJECT" ]; then
  usage
elif [ -d "$PROJECT" ]; then
  path="$PROJECT"
else
  path="$SRC/$PROJECT"
fi

if [ ! -e "$path" ]; then
  first_match=`src list -a | fgrep -m1 "$PROJECT"`
  if [ -n "$first_match" ]; then
    path="$SRC/$first_match"
  else
    echo "$path does not exist"
    exit 1
  fi
fi

if [ "$1" = "--path" ]; then
  echo "$path"
  exit
elif [ -f "$path" ]; then
  sensible-editor "$path"
  exit
elif [ ! -d "$path" ]; then
  echo "Unsupported path $path"
  exit 1
fi

case "$1" in
  '')
    echo "$path"
    exit
    ;;
  -e)
    command="$2"
    shift 2
    ;;
  @*)
    src "$path"
    command="mux $1"
    shift
    ;;
  *)
    command="git"
    ;;
esac

cd "$path"
exec $command "$@"
