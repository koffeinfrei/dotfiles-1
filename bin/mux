#!/bin/bash

PROCFILE=$( find ~/.procfile.d/"$( basename "$PWD" )" Procfile 2>/dev/null | head -1 )

case "$1" in
  @*)
    proc="${1:1}"
    shift

    if [ -f "$PROCFILE" ]; then
      commands=$( egrep -o "^$proc.*:.+" "$PROCFILE" )
      count=$( echo "$commands" | grep -c . )

      if [ $count -gt 0 ]; then
        echo "$commands" | while read command; do
          localproc=$( echo "$command" | cut -d: -f1 )
          command=$( echo "$command" | cut -d: -f2- )

          case "$localproc" in
            guard)
              options="-b -V"
              ;;
            *)
              options="-b"
              ;;
          esac

          $0 $options "$@" "$0 title '${localproc:${#proc}+1}'; $0 loop '$command'"
        done

        exit
      fi
    fi

    command="$proc $*"
    options="-V"

    case "$proc" in
      dev)
        $0 @server

        if [ -f Guardfile ] || grep -q ^guard: "$PROCFILE"; then
          wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
          sleep 0.1
          $0 @guard
        fi

        exit
        ;;
      guard)
        command="bundle exec guard"
        options="-b -V"
        ;;
      log)
        if [ -f "log/development.log" ]; then
          command="tail -n 0 -f log/development.log"
          options="-S"
        else
          echo "Can't find log for project."
          exit 1
        fi
        ;;
      server)
        options="-b"

        if [ -x bin/rails -o -x script/rails ]; then
          command="rails server"
        elif [ -f .ember-cli ]; then
          command="ember serve"
        elif [ -f Gruntfile.js -o -f Gruntfile.coffee ]; then
          command="grunt serve"
        elif [ -x bin/server ]; then
          command="bin/server"
        else
          echo "Can't find server for project."
          exit 1
        fi
        ;;
      console)
        if [ -x bin/rails ]; then
          command="rails console"
        elif [ -f Gruntfile.js ]; then
          command="node"
        elif [ -x bin/console ]; then
          command="bin/console"
        else
          echo "Can't find console for project."
          exit 1
        fi
        ;;
      *)
        echo "Unknown process '$proc'"
        exit 1
        ;;
    esac

    $0 $options "$@" "$0 title '$proc'; $0 loop $command"
    ;;
  loop)
    shift
    command=( "$@" )

    while true; do
      clear
      (eval "${command[@]}")

      >&2 echo -ne "
 \e[0;34m[\e[1;34m ${command[*]} \e[0;34m]•••\e[0m
   \e[0;36m• \e[1;36mR\e[0;36mestart command\e[0m
   \e[0;36m• \e[1;36mE\e[0;36mxecute another command\e[0m
   \e[0;33m• \e[1;33mQ\e[0;33muit\e[0m
 \e[0;32m•••\e[0m "

      read -n 1 2>/dev/null || exit
      echo

      case "$REPLY" in
        [rR]*|"")
          continue
          ;;
        [eE]*)
          echo -ne "  \e[0;34m•• \e[1;34mcommand:\e[0m "
          read
          command=( "$REPLY" )
          ;;
        *)
          echo
          exit
          ;;
      esac
    done
    ;;
  title)
    shift
    title="${1:-$( basename "$PWD" )}"
    title="@$title"
    if [[ "$TERM" =~ ^(tmux|screen) ]]; then
      echo -ne "\033]0;$title\007\033k$title\033\\"
    else
      echo -ne "\033]1;$title\007\033]2;$title\007"
    fi
    ;;
  choose)
    shift
    items=""
    for item in "$@"; do
      [ -n "$items" ] && items="$items,"
      items="$items${item//,/ }"
    done

    $0 capture choose-list -l "$items"
    ;;
  input)
    shift
    prompt="$1"

    $0 capture command-prompt -p "$prompt"
    ;;
  capture)
    shift

    env="MUX_CAPTURE_${TMUX_PANE//%/}"
    tmux setenv -u "$env"

    tmux "$@" "setenv '$env' '%%'"
    while ! tmux showenv "$env" &>/dev/null; do
      sleep 0.1
    done

    tmux showenv "$env" | cut -d= -f2-
    tmux setenv -u "$env"
    ;;
  *)
    action='new-window'
    unset args background

    while [ "${1:0:1}" = "-" ]; do
      case "$1" in
        -S)
          action='split-window'
          args="$args -v -l 20"
          ;;
        -V)
          action='split-window'
          if [ "$( tput cols )" -ge 160 ]; then
            args="$args -h -l 80"
          else
            args="$args -v -l 20"
          fi
          ;;
        -b)
          background=1
          ;;
        -s)
          action='split-window'
          args="$args -v"
          ;;
        -v)
          action='split-window'
          args="$args -h"
          ;;
        -c|-l|-p)
          args="$args $1 $2"
          shift
          ;;
        *)
          echo "Usage: $0 [-b] [-c|-s|-v] [-l size|-p percentage] [COMMAND..]"
          exit 255
          ;;
      esac

      shift
    done

    if [ $# -eq 0 ]; then
      set --
      set -- bash --login
    fi

    tmux $action $args -- "export PATH=\"$PATH\"; tmux setenv TMUXPWD_\$(tmux display -p '#D' | tr -d %) \"$PWD\"; $*"

    if [ "$background" ]; then
      if [ "$action" = "new-window" ]; then
        tmux last-window
      else
        tmux last-pane
      fi
    fi
    ;;
esac
