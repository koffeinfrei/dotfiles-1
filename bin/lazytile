#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'socket'
require 'yaml'

# Check for required commands
%w[ xwininfo xprop xwit ].each do |command|
  unless system("which #{command} &>/dev/null")
    puts "Sorry, can't find the '#{command}' command."
    exit 1
  end
end

class Lazytile
  TILING_MODES = {
    #
    # These are the definitions of all available tiling modes.
    # Each mode is a Proc that gets passed a hash for the (s)creen and (w)indow:
    #
    # - screen = { width: %d, height: %d, x: %d, y: %d }
    # - window = { width: %d, height: %d, x: %d, y: %d, border: {} }
    #
    # :x and :y are the margin for the screen (set in .lazytile.conf, 0 by default) and the position for the window, respectively.
    # :border is a hash of window border sizes for :left, :right, :top and :bottom.
    #
    # The return value of the Proc will be merged with the screen hash to create a new set of window properties,
    # so by default an empty tiling function will maximize the window.
    #
    # The border sizes will be automatically removed from the window width and height, so you usually don't need to consider them.
    #

    # Fill the whole screen
    maximize: lambda { |_s, _w|
      {}
    },

    # Fill the left half of the screen
    left: lambda { |s, _w|
      {
        width: s[:width] / 2,
      }
    },

    # Fill the right half of the screen
    right: lambda { |s, _w|
      width = s[:width] / 2

      {
        width: width,
        x: s[:x] + width,
      }
    },

    # Fill the top half of the screen
    top: lambda { |s, _w|
      {
        height: s[:height] / 2,
      }
    },

    # Fill the bottom half of the screen
    bottom: lambda { |s, _w|
      height = s[:height] / 2

      {
        height: height,
        y: s[:y] + height,
      }
    },

    # Fill the left two thirds of the screen
    wideleft: lambda { |s, _w|
      {
        width: s[:width] * 0.7,
      }
    },

    # Fill the right two thirds of the screen
    wideright: lambda { |s, _w|
      width = s[:width] * 0.7

      {
        width: width,
        x: s[:x] + s[:width] - width,
      }
    },

    # Fill the top two thirds of the screen
    widetop: lambda { |s, _w|
      {
        height: s[:height] * 0.7,
      }
    },

    # Fill the bottom two thirds of the screen
    widebottom: lambda { |s, _w|
      height = s[:height] * 0.7

      return {
        height: height,
        y: s[:y] + s[:height] - height,
      }
    },

    # Fill the center of the screen, with margin on all sides
    center: lambda { |s, _w|
      width = (s[:width] * 0.8).round

      {
        width: width,
        height: s[:height] - 0.5 * s[:y],
        x: s[:width] / 2 - width / 2,
        y: s[:y] * 1.25,
      }
    },

    # Fill the top left corner of the screen
    topleft: lambda { |s, _w|
      {
        width: s[:width] / 2,
        height: s[:height] / 2,
      }
    },

    # Fill the top right corner of the screen
    topright: lambda { |s, _w|
      width = s[:width] / 2

      {
        width: width,
        height: s[:height] / 2,
        x: s[:x] + width,
      }
    },

    # Fill the bottom left corner of the screen
    bottomleft: lambda { |s, _w|
      height = s[:height] / 2

      {
        width: s[:width] / 2,
        height: height,
        y: s[:y] + height,
      }
    },

    # Fill the bottom right corner of the screen
    bottomright: lambda { |s, _w|
      width = s[:width] / 2
      height = s[:height] / 2

      {
        width: width,
        height: height,
        x: s[:x] + width,
        y: s[:y] + height,
      }
    },

  }.freeze

  CONFIG = "#{ENV['HOME']}/.lazytile.conf".freeze
  SOCKET = "#{ENV['HOME']}/.lazytile.sock".freeze

  # Perform a tile command by sending it to the client socket
  def self.tile(mode, id = nil)
    if client.send [ mode, id ].join("\t"), 0
      true
    else
      false
    end
  end

  # Check if the daemon process is running
  def self.running?
    !daemon_pid.nil?
  end

  # Fork the daemon process
  def self.start_daemon
    return false if running?

    if fork
      # In the client process, wait until the daemon is running
      return wait_for { running? }
    end

    # In the daemon process

    at_exit { stop_daemon }

    debug 'opening daemon socket...'
    @socket = UNIXServer.open(SOCKET)

    # Listen for messages
    while client = @socket.accept
      message = client.recvfrom(100).first.strip

      # Perform the tiling action
      mode, id = message.split "\n"
      perform_tile mode, id
      cleanup
    end
  end

  # Stop the daemon process
  def self.stop_daemon
    if running?
      # Close the socket
      if @socket
        debug 'closing daemon socket...'
        @socket.close unless @socket.closed?
      end

      # Save the configuration
      if @config
        debug "writing configuration to #{CONFIG}..."
        open CONFIG, 'w' do |file|
          file.write @config.to_yaml
        end
      end

      true
    else
      false
    end
  ensure
    FileUtils.rm_f SOCKET
  end

  # Forcefully kill the daemon process
  def self.kill_daemon
    if pid = daemon_pid
      debug 'killing daemon...'
      Process.kill 'TERM', pid
      return wait_for { !running? }
    end

    !running?
  end

  # Capture the stdout of a command
  def self.output(command)
    `#{command} 2>/dev/null`.strip
  end

  # Wait until the block returns true
  def self.wait_for(&block)
    value = false

    30.times do
      sleep 0.1
      value = block.call
      break if value
    end

    value
  end

  # Detect if any of the values in the two hashes differ
  def self.changed(first, second, error_margin = 2)
    return true unless first && second

    first.find do |key, value|
      diff = (value - second[key].to_i).abs
      diff > error_margin
    end
  end

  # Detect the pid of the daemon process listening to the socket
  def self.daemon_pid
    if File.exist? SOCKET
      pid = output "lsof -F p '#{SOCKET}'"
      if $?.success?
        pid.sub!(/\Ap(\d+).*/m, '\1')
        pid.to_i
      end
    end
  end

  # Return a list of all window IDs
  def self.window_list
    output('xprop -root _NET_CLIENT_LIST').sub(/.*#/, '').strip.split(', ')
  end

  # Return the ID of the active window
  def self.active_window
    output('xprop -root _NET_ACTIVE_WINDOW')[/\b(0x\w+)/, 1]
  end

  # Return the window properties for the given ID
  def self.window_props(id)
    id = (id == :root) ? '-root' : "-id #{id}"

    # Parse the geometry information from the xwininfo output
    x, y, width, height, bleft, bright, btop, bbottom = output("xwininfo -stats -wm #{id} | awk '
      /Absolute upper-left X:|Absolute upper-left Y:/ { print $4 }
      /Width:|Height:/ { print $2 }
      /Frame extents:/ { print $3; print $4; print $5; print $6 }
    '").split(/\s+/).map(&:to_i)

    # Collect the window properties
    props = {
      width: width,
      height: height,
      x: x,
      y: y,
    }

    # Collect the window border properties
    if bleft
      props[:x] -= bleft
      props[:y] -= btop

      props[:border] = {
        left: bleft,
        right: bright,
        top: btop,
        bottom: bbottom,
      }
    end

    props
  end

  # Return the client, open the socket if necessary
  def self.client
    @client ||= UNIXSocket.open(SOCKET)
  rescue Errno::ENOENT, Errno::ECONNREFUSED
    # Restart the daemon on socket errors
    stop_daemon
    start_daemon
    retry
  end

  # Return the configuration
  def self.config
    unless @config
      @config ||= {}

      # Read existing configuration
      if File.exist? CONFIG
        debug "reading configuration from #{CONFIG}..."
        config = YAML.load_file(CONFIG)
        @config = config if config.is_a?(Hash)
      end

      # Set default configuration
      @config[:windows] ||= {}
      @config[:screen] ||= {}
      @config[:screen][:x] ||= 0
      @config[:screen][:y] ||= 0

      # Update screen size
      screen = window_props(:root)
      @config[:screen][:width] = screen[:width]
      @config[:screen][:height] = screen[:height]

      cleanup
    end

    @config
  end

  # Perform the given tiling mode
  def self.perform_tile(mode, id = nil)
    mode = mode.to_sym
    id ||= active_window

    unless tiling_function = TILING_MODES[mode]
      debug "invalid tiling mode #{mode.inspect}", "window #{id}"
      return false
    end

    # Get the current window properties
    current_props = window_props(id)

    # Subtract the margin from the screen size
    current_screen = config[:screen].dup
    current_screen[:width]  -= 2 * config[:screen][:x]
    current_screen[:height] -= 2 * config[:screen][:y]

    # Call the tiling function
    props = current_screen.merge(tiling_function.call(current_screen, current_props) || {})

    # Add the window borders
    if border = current_props.delete(:border)
      props[:width]  -= border[:left] + border[:right]
      props[:height] -= border[:bottom] + border[:top]
    end

    window = (config[:windows][id] ||= {})

    # Check if the mode has changed
    same_mode = window[:mode] == mode

    # Check if the window is not in its new target position
    moved_from_target = changed(current_props, props)

    # Check if the window was moved from its last target position
    moved_from_last = changed(current_props, window[:last])

    # Check if the original position of the window has changed
    moved_from_original = !window[:original] || (same_mode && changed(current_props, window[:original]))

    message = "tiling #{mode.inspect}"

    if same_mode && !moved_from_target && window[:original]
      mode = :original
      message = 'restoring'
      props = window[:last] = window[:original]

    elsif moved_from_last || moved_from_original
      debug :storing, "window #{id}", current_props
      window[:original] = current_props
    end

    debug message, "window #{id}", props

    window[:mode] = mode
    window[:last] = props

    # Move and resize the window
    system('xwit -id %s -move %d %d -resize %d %d' % [ id, props[:x], props[:y], props[:width], props[:height] ])

    # Move the mouse cursor to the center of the window
    system('xwit -id %s -sync -focus -warp %d %d' % [ id, props[:width] / 2, props[:height] / 2 ])
  end

  # Cleanup method that gets called after every tiling action
  def self.cleanup(force = false, cycles = 1000)
    # Only run after the given number of cycles
    if force || !@counter || (@counter -= 1).zero?
      @counter = cycles

      # Purge all windows that don't exist anymore
      windows = config[:windows].keys - window_list
      windows.each { |w| config[:windows].delete w }

      debug "cleanup: kept #{config[:windows].size} windows, purged #{windows.size}"
    end
  end
end

def run
  opts = OptionParser.new

  usage = lambda {
    puts opts
    exit 255
  }

  opts.banner = "Usage: #{File.basename $0} [OPTIONS] MODE"

  opts.separator ''
  opts.separator 'Options:'

  opts.on '-i', '--id WINDOW_ID', String, 'Use specified window instead of current window' do |id|
    @id = id
  end

  opts.on '-v', '--verbose', 'Show debug information' do
    def debug(*message)
      message = message.map do |m|
        m.is_a?(String) ? m : m.inspect
      end

      puts "#{File.basename $0}[#{$$}] #{message.join ' '}"
    end
  end

  opts.on '-h', '--help', 'Show this message', &usage

  opts.separator ''
  opts.separator 'Tiling Modes:'

  modes = '  '
  Lazytile::TILING_MODES.keys.map(&:to_s).sort.each_with_index do |mode, i|
    if i > 0 && (i % 5).zero?
      opts.separator modes
      modes = '  '
    end
    modes << "#{mode}, "
  end
  opts.separator modes

  opts.separator ''
  opts.separator 'Other Commands:'
  opts.separator '  status, start, stop, restart'
  opts.separator ''

  opts.parse!

  case arg = ARGV[0]
  # Show the daemon status
  when 's', 'status'
    puts "Lazytile daemon is#{Lazytile.running? ? '' : ' not'} running."
    exit

  # Kill the daemon
  when 'stop'
    unless Lazytile.running?
      puts 'Lazytile daemon is not running.'
      exit false
    end

    Lazytile.kill_daemon

    if Lazytile.running?
      puts "Couldn't stop Lazytile daemon."
      exit true
    else
      puts 'Successfully stopped Lazytile daemon.'
      exit false
    end

  # Restart the daemon
  when 'r', 'start', 'restart'
    running = Lazytile.running?
    Lazytile.kill_daemon
    Lazytile.start_daemon
    if Lazytile.running?
      puts "Successfully #{running ? 'restarted' : 'started'} Lazytile daemon."
      exit true
    else
      puts "Couldn't restart Lazytile daemon."
      exit false
    end

  # Show the usage help
  when nil
    usage.call

  # Use the argument as tiling mode command
  else
    if Lazytile::TILING_MODES[arg.to_sym]
      Lazytile.tile arg, @id
    else
      puts "Error: Invalid tiling mode '#{arg}'\n\n"
      usage.call
    end
  end
rescue OptionParser::ParseError => exception
  if defined? usage
    puts exception.message
    usage.call
  else
    raise exception
  end
end

def debug(*args); end

run
